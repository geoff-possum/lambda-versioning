{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates versioned HelloWorld Lambda function",
  "Parameters": {
    "CustomResourceStackName" : {
      "Description" : "The name of the stack containing the lambda functions for versioning",
      "Type" : "String"
    },
    "KmsKeyArn": {
      "Default": "",
      "Description": "KMS Key Arn to encrypt Environment variables.  AWS default will be used if left blank",
      "Type": "String",
      "NoEcho": true
    },
    "LoggingTTL" : {
      "Default" : 7,
      "Description" : "The TTL in days for the logs generated by the Lambda functions",
      "Type" : "Number",
      "AllowedValues" : [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    },
    "SecurityGroupIds": {
      "Default": "",
      "Description": "If running within a VPC, at least one security group must be specified, along with at least one subnet",
      "Type": "String"
    },
    "SubnetIds": {
      "Default": "",
      "Description": "If running within a VPC, at least one subnet must be specified, along with at least one security group",
      "Type": "String"
    }
  },
  "Conditions": {
    "VPCRequested" : { 
      "Fn::And" : [
        { "Fn::Not" : [ { "Fn::Equals" : [ "", { "Ref" : "SecurityGroupIds" } ] } ] },
        { "Fn::Not" : [ { "Fn::Equals" : [ "", { "Ref" : "SubnetIds" } ] } ] }
      ] 
    }
  },
  "Resources": {
    "Hasher" : {
      "Type" : "Custom::CodeHasher",
      "Properties" : {
        "ServiceToken": { "Fn::ImportValue" : { "Fn::Sub" : "${CustomResourceStackName}-CodeHash" } },
        "ZipFile": {
          "Fn::Join": [
            "\n",
            [
              "import json",
              "def lambda_handler(event, context):",
              "  print event",
              "  name = event.get('name', 'World')",
              "  return { \"statusCode\": 200, \"body\": json.dumps(\"Hello {}!\".format(name)) }"
            ]
          ]
        },
        "Description": "Hello World lambda",
        "Environment" : {
          "Variables" : {
            "AA": "Some Value",
            "BB": "Another Value"
          }
        },
        "Handler": "index.lambda_handler",
        "KmsKeyArn": { "Ref" : "KmsKeyArn" },
        "Layers" : [ ],
        "MemorySize": 128,
        "Role": { "Fn::GetAtt" : [ "Role", "Arn"] },
        "Runtime": "python2.7",
        "Timeout": 60,
        "VpcConfig": {
          "Fn::If" : [
            "VPCRequested", 
            {
              "SecurityGroupIds": { "Fn::Split" : [ ",", { "Ref" : "SecurityGroupIds" } ] },
              "SubnetIds": { "Fn::Split" : [ ",", { "Ref" : "SubnetIds" } ] }
            },
            { "Ref" : "AWS::NoValue" }      
          ]
        }
      }
    },
    "Lambda": {
      "Properties": {
        "Code": { "Fn::GetAtt" : [ "Hasher", "Code" ] },
        "Description": { "Fn::GetAtt" : [ "Hasher", "Description" ] },
        "Environment": { "Fn::GetAtt" : [ "Hasher", "Environment" ] },
        "Handler": { "Fn::GetAtt" : [ "Hasher", "Handler" ] },
        "KmsKeyArn": { "Fn::GetAtt" : [ "Hasher", "KmsKeyArn" ] },
        "Layers" : { "Fn::GetAtt" : [ "Hasher", "Layers" ] },
        "MemorySize": { "Fn::GetAtt" : [ "Hasher", "MemorySize" ] },
        "Role": { "Fn::GetAtt" : [ "Hasher", "Role" ] },
        "Runtime": { "Fn::GetAtt" : [ "Hasher", "Runtime" ] },
        "Timeout": { "Fn::GetAtt" : [ "Hasher", "Timeout" ] },
        "TracingConfig": { "Fn::GetAtt" : [ "Hasher", "TracingConfig" ] },
        "VpcConfig": {
          "Fn::If" : [
            "VPCRequested", 
            { "Fn::GetAtt" : [ "Hasher", "VpcConfig" ] },
            { "Ref" : "AWS::NoValue" }
          ]
        }
      },
      "Type": "AWS::Lambda::Function"
    },
    "VersionCreator" : {
      "Type" : "Custom::VersionCreator",
      "Properties" : {
        "ServiceToken": { "Fn::ImportValue" : { "Fn::Sub" : "${CustomResourceStackName}-VersionCreator" } },
        "LambdaHash": { "Fn::GetAtt" : [ "Hasher", "CodeHash" ] },
        "LambdaFunctionArn" : { "Fn::GetAtt" : [ "Lambda", "Arn" ] }
      }
    },
    "Role" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns" : [ 
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ],
        "Path": "/"      
      }
    },
    "LogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
          "LogGroupName" : { "Fn::Sub" : "/aws/lambda/${Lambda}" },
          "RetentionInDays" : { "Ref" : "LoggingTTL" }
      }
    }
  },
  "Outputs": {
    "LambdaVersion": {
      "Description": "LambdaVersion Arn",
      "Value": { "Fn::GetAtt": [ "VersionCreator", "VersionArn" ] }
    }
  }
}